DELIMITER $$
CREATE PROCEDURE PobierzWypozyczenia(IN data_poczatkowa DATE, IN data_koncowa DATE, IN id_klienta INT)
BEGIN
 SELECT imie_klienta, nazwisko_klienta, id_wypozyczenia, cena_doba * ilosc_dob AS 'Koszt wypożyczenia' FROM klienci 
 JOIN wypozyczenia ON klienci.id = wypozyczenia.id_klienta 
 JOIN dane_wypozyczen ON wypozyczenia.id = dane_wypozyczen.id_wypozyczenia 
 WHERE klienci.id = id_klienta AND wypozyczenia.data_wyp BETWEEN data_poczatkowa AND data_koncowa;
END$$
DELIMITER ;


1. Zapisana procedura, która wyświetla listę wszystkich klientów z określonego miasta:
DELIMITER $$
CREATE PROCEDURE PobierzKlientowZMiejsca(IN miasto VARCHAR(45))
BEGIN
 SELECT * FROM klienci WHERE miasto_klienta = miasto;
END$$
DELIMITER ;

2. Zapisana procedura, która aktualizuje cenę wypożyczenia dla określonego typu wypożyczenia:
DELIMITER $$
CREATE PROCEDURE AktualizujCeneWypozyczenia(IN typ_wypozyczenia VARCHAR(45), IN nowa_cena DECIMAL(8,2))
BEGIN
 UPDATE dane_wypozyczen SET cena_doba = nowa_cena WHERE id_wypozyczenia IN (
   SELECT id_wypozyczenia FROM wypozyczenia WHERE id_samochodu IN (
     SELECT id_samochodu FROM samochody WHERE id_klasy IN (
       SELECT id_klasy FROM klasy_samochodow WHERE nazwa_klasy = typ_wypozyczenia
     )
   )
 );
END$$
DELIMITER ;

3. Zapisana procedura, która dodaje nową książkę do bazy danych:
DELIMITER $$
CREATE PROCEDURE DodajKsiazke(IN tytul VARCHAR(45), IN autor VARCHAR(45), IN rok_wydania YEAR)
BEGIN
 INSERT INTO ksiazki (tytul, autor, rok_wydania) VALUES (tytul, autor, rok_wydania);
END$$
DELIMITER ;


4. Zapisana procedura, która usuwa wypożyczenie dla określonego klienta:
DELIMITER $$
CREATE PROCEDURE UsunWypozyczenie(IN id_klienta INT, IN id_wypozyczenia INT)
BEGIN
 DELETE FROM wypozyczenia WHERE id_klienta = id_klienta AND id_wypozyczenia = id_wypozyczenia;
END$$
DELIMITER ;

5. Zapisana procedura, która wyświetla listę wszystkich wypożyczeń dla określonego klienta:
DELIMITER $$
CREATE PROCEDURE PobierzWypozyczeniaKlienta(IN id_klienta INT)
BEGIN
 SELECT * FROM wypozyczenia WHERE id_klienta = id_klienta;
END$$
DELIMITER ;


CALL PobierzKlientowZMiejsca('Wrocław');
CALL AktualizujCeneWypozyczenia('Kompakt', 50.00);
CALL DodajKsiazke('Nowa Książka', 'Jan Kowalski', 2023);
CALL UsunWypozyczenie(1, 1);
CALL PobierzWypozyczeniaKlienta(1);


DROP PROCEDURE IF EXISTS osoby;
DELIMITER $$
CREATE PROCEDURE osoby(
    _miasto VARCHAR(45)
)
BEGIN
SELECT imie_klienta as imie, nazwisko_klienta as nazwisko , miasto_klienta as miasto, 'klient' as kto
FROM klienci
WHERE miasto_klienta = _miasto
UNION 
SELECT imie_pracownika, nazwisko_pracownika, miasto_pracownika, 'pracownik' 
FROM pracownicy
WHERE miasto_pracownika = _miasto;
END$$

DELIMITER //
CREATE PROCEDURE DisplayRentInfo(IN start_date DATE, IN end_date DATE, IN client_id INT)
BEGIN
   SELECT klienci.imie_klienta, klienci.nazwisko_klienta, wypozyczenia.id_wypozyczenia, dane_wypozyczen.cena_doba * dane_wypozyczen.ilosc_dob AS cost
   FROM klienci
   JOIN wypozyczenia ON klienci.id_klienta = wypozyczenia.id_klienta
   JOIN dane_wypozyczen ON wypozyczenia.id_wypozyczenia = dane_wypozyczen.id_wypozyczenia
   WHERE klienci.id_klienta = client_id AND wypozyczenia.data_wyp BETWEEN start_date AND end_date;
END //
DELIMITER ;

Wyswietla klientow i pracowników (wszystkie kolumny, z dopiskiem pracownik'/'klient)
Parametrem wywolania jest miasto Wroclaw
Wyswietla imiona i nazwiska klentow, numery wypozyczen oraz kooszt wypozyczen.
Parametrem wywolania jest data poczatkowa i data koncowa oraz id klienta



DROP PROCEDURE IF EXISTS kl;

DELIMITER $$
    CREATE PROCEDURE kl()
        BEGIN
            SELECT * FROM klienci;
        END$$
DELIMITER ;

CALL kl();

DROP PROCEDURE IF EXISTS kl_m;

DELIMITER $$
    CREATE PROCEDURE kl_m(
    	_miasto VARCHAR(45)
    )
        BEGIN
            SELECT * FROM klienci
            WHERE klienci.miasto_klienta = _miasto;
        END$$
DELIMITER ;

SET @miasto = 'Wrocław';
CALL kl_m(@miasto);

Procedura 1:

Wyświetla podsumowanie wypożyczeń 
(id wypożyczenia, model i marka pojadu, data wypożyczenia i data zwrotu, imię i nazwisko klienta, wartość wypożyczenia)

Paramterem wywołania jest data początkowa i końcowa (data wypożyczenia - nie data zwrotu),
np od 1 do 31 grudnia 2022 r.

DROP PROCEDURE IF EXISTS RaportWypozyczen;

DELIMITER $$
CREATE PROCEDURE RaportWypozyczen (
    IN v_datapoczatkowa DATE,
	IN v_datakoncowa DATE)
BEGIN
    SELECT 
        klienci.imie_klienta,
        klienci.nazwisko_klienta,
        wypozyczenia.id_wypozyczenia,
        wypozyczenia.data_wyp,
        wypozyczenia.data_zwr,
        samochody.marka,
        samochody.model,
        dane_wypozyczen.ilosc_dob,
        dane_wypozyczen.cena_doba*dane_wypozyczen.ilosc_dob AS 'kwota'
    FROM klienci
        JOIN wypozyczenia ON wypozyczenia.id_klienta = klienci.id_klienta
        JOIN dane_wypozyczen ON dane_wypozyczen.id_wypozyczenia = wypozyczenia.id_wypozyczenia
        JOIN samochody ON samochody.id_samochodu = dane_wypozyczen.id_samochodu
    WHERE wypozyczenia.data_wyp BETWEEN v_datapoczatkowa AND v_datakoncowa
    GROUP BY samochody.id_samochodu  
    ORDER BY wypozyczenia.id_wypozyczenia ASC;
END$$ 
DELIMITER ;
SET @v_datapoczatkowa=('2022-12-25');
SET @v_datakoncowa=('2022-12-31');
CALL RaportWypozyczen(@v_datapoczatkowa,@v_datakoncowa)

Procedura 2:

Wyświetla dostępne auta w danym dniu (model, marka, nr rejestracyjny, cena za dobę)

Paramterem wywołania jest dzień (np. 31.12.2022 r.)

DROP PROCEDURE IF EXISTS DostepnoscSamochodu;

DELIMITER $$
CREATE PROCEDURE DostepnoscSamochodu (
    IN v_datadostepnosci DATE)
BEGIN
    SELECT 
        samochody.id_samochodu,
        samochody.marka,
        samochody.model,
        samochody.nr_rejestracyjny,
        klasy_samochodow.nazwa_klasy,
        samochody.cena_katalogowa
    FROM samochody
        
   WHERE id_samochodu NOT IN
   			(SELECT samochody.id_samochodu
             FROM samochody
                  JOIN dane_wypozyczen ON dane_wypozyczen.id_samochodu = samochody.id_samochodu
                  JOIN wypozyczenia ON wypozyczenia.id_wypozyczenia = dane_wypozyczen.id_wypozyczenia
             WHERE wypozyczenia.data_wyp <= v_datadostepnosci 
             AND wypozyczenia.data_zwr >= v_datadostepnosci);
END$$
DELIMITER ;

SET @datadostepnosci=('2022-12-31');

CALL DostepnoscSamochodu(@datadostepnosci);

DELIMITER //
  CREATE PROCEDURE WyświetlInformacjeOWynajmie(IN start_date DATE, IN end_date DATE, IN client_id INT)
  BEGIN
     SELECT klienci.imie_klienta, klienci.nazwisko_klienta, wypozyczenia.id_wypozyczenia, dane_wypozyczen.cena_doba * dane_wypozyczen.ilosc_dob AS koszt
     FROM klienci
     JOIN wypozyczenia ON klienci.id_klienta = wypozyczenia.id_klienta
     JOIN dane_wypozyczen ON wypozyczenia.id_wypozyczenia = dane_wypozyczen.id_wypozyczenia
     WHERE klienci.id_klienta = client_id AND wypozyczenia.data_wyp BETWEEN start_date AND end_date;
  END //
DELIMITER ;

CALL WyświetlInformacjeOWynajmie('2019-01-01', '2023-12-31', 1);

DELIMITER //
  CREATE PROCEDURE OsobyZMiasta(IN miasto VARCHAR(45))
  BEGIN
    SELECT imie_klienta as imie, nazwisko_klienta as nazwisko , miasto_klienta as miasto, 'klient' as kto
    FROM klienci
    WHERE miasto_klienta = miasto
    UNION
    SELECT imie_pracownika, nazwisko_pracownika, miasto_pracownika, 'pracownik'
    FROM pracownicy
    WHERE miasto_pracownika = miasto;
  END //
DELIMITER ;

DROP PROCEDURE IF EXISTS zadanie2;
DELIMITER $$
CREATE PROCEDURE zadanie2(
    IN
        _start_date date,
    _end_date date
)
BEGIN
    DROP TEMPORARY TABLE IF EXISTS temp;
    CREATE TEMPORARY TABLE temp AS
    SELECT klienci.id_klienta, COUNT(klienci.id_klienta) v
    FROM klienci
             JOIN wypozyczenia ON klienci.id_klienta = wypozyczenia.id_klienta
    WHERE wypozyczenia.data_wyp > _start_date
      AND wypozyczenia.data_zwr < _end_date
    GROUP BY klienci.id_klienta
    HAVING v = (SELECT COUNT(*) v
                FROM wypozyczenia
                WHERE wypozyczenia.data_wyp > _start_date
                  AND wypozyczenia.data_zwr < _end_date
                GROUP BY wypozyczenia.id_klienta
                ORDER BY v DESC
                LIMIT 1);

    SELECT klienci.imie_klienta, klienci.nazwisko_klienta
    FROM klienci
    WHERE klienci.id_klienta IN (SELECT temp.id_klienta FROM temp);

END $$
DELIMITER ;
CALL zadanie2('2022-12-01', '2022-12-31');

DELIMITER $$
CREATE PROCEDURE GetClientWithMostRentals(IN start_date DATE, IN end_date DATE)
BEGIN
 SELECT klienci.imie_klienta, klienci.nazwisko_klienta, COUNT(wypozyczenia.id_wypozyczenia) AS rental_count
 FROM klienci
 JOIN wypozyczenia ON klienci.id_klienta = wypozyczenia.id_klienta
 WHERE wypozyczenia.data_wyp BETWEEN start_date AND end_date
 GROUP BY klienci.id_klienta
 ORDER BY rental_count DESC
 LIMIT 1;
END $$
DELIMITER ;

CALL GetClientWithMostRentals('2022-12-01', '2022-12-31');


DROP PROCEDURE IF EXISTS zadanie1;
DELIMITER $$
CREATE PROCEDURE zadanie1(
    IN
    _imie varchar(45),
    _nazwisko varchar(45)
    )
BEGIN
SELECT wypozyczenia.id_wypozyczenia, wypozyczenia.data_wyp, wypozyczenia.data_zwr, samochody.nr_rejestracyjny, samochody.marka, samochody.model FROM wypozyczenia JOIN dane_wypozyczen ON dane_wypozyczen.id_wypozyczenia = wypozyczenia.id_wypozyczenia JOIN samochody ON dane_wypozyczen.id_samochodu = samochody.id_samochodu JOIN klienci ON wypozyczenia.id_klienta = klienci.id_klienta WHERE klienci.imie_klienta = _imie AND klienci.nazwisko_klienta = _nazwisko;
END$$
DELIMITER ;